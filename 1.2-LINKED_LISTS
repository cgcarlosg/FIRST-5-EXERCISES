# Start with your code from last challenge.
class Node
  attr_accessor :value, :next_node      
  def initialize(value, next_node = nil)  
    @value = value
    @next_node = next_node
  end
end

class LinkedList
  #setup head and tail
  def initialize
    @head = nil
    @tail = nil
  end  

  def add(number)    
    this_node = Node.new(number)
    if @head.nil?
      @head = this_node
    else
      current = @head
      until current.next_node.nil?
        current = current.next_node
      end    
      current.next_node = this_node    
    end    
  end
  
  

  def get(index)   
    current = @head    
    index.times do    
      current = current.next_node
    end    
    current.value    
  end    
  
  
   def at(index)
    cur_index = 0
    current_node = @head
    until cur_index == index
      cur_index += 1
      current_node = current_node.next_node
      return Node.new(-1, nil) if current_node.nil?
    end
    current_node
  end

 def add_at(index, value)
    # base case, index is 0, replace head
    if index.zero?
      temp = @head
      @head = Node.new(value, temp)
    elsif at(index).value.negative?
      puts 'The index is out of bounds'
    elsif at(index) == @tail
      temp = @tail
      @tail = Node.new(value, nil)
      temp.next_node = @tail
    else
      new_node = Node.new(value, at(index))
      before = at(index - 1)
      before.next_node = new_node
      new_node
    end
  end
  
  
  
  def remove(index)
    if index.zero?
      @head = @head.next_node
    elsif at(index).value.negative?
      puts 'The index is out of bounds'
    elsif at(index) == @tail
      @tail = at(index - 1)
      @tail.next_node = nil
    else
      at(index - 1).next_node = at(index + 1)
    end
  end
  
  
end
 
list = LinkedList.new

list.add(3)
list.add(5)
list.add_at(1, 11)
list.add_at(0, 13)

puts list.get(2)
# => 11

puts list.get(3)
# => 5
